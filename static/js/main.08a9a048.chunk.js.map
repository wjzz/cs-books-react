{"version":3,"sources":["components/Books.ts","components/BookItem.tsx","components/BookTable.tsx","components/BookListSummary.tsx","components/BookList.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["initial_books","title","src","saveUserBookData","booksData","forEach","book","index","_ref","String","read","key","value","localStorage","setItem","BookItem","props","info","toggleRead","_info$book","readMark","readOrUnread","imgSrc","react_default","a","createElement","className","alt","height","react_router","path","concat","children","match","react_router_dom","to","onClick","BookTable","book_items","books","map","components_BookItem","BookListSummary","toggleAll","sortByKey","sortByTitle","books_number","length","books_read","filter","percentage","toFixed","books_plurarize","total_books_info","read_books_info","mark_all_unread_btn","mark_all_read_btn","BookList","Fragment","components_BookTable","components_BookListSummary","App","initial_user_book_data","getItem","push","getUserBookData","_useState","useState","_useState2","Object","slicedToArray","setBooks","components_BookList","newBooks","toConsumableArray","bookToChange","objectSpread","sort","b","Boolean","window","location","hostname","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08a9a048.chunk.js","sourcesContent":["export interface Book {\r\n    title: string;\r\n    src: string;\r\n}\r\n\r\nexport interface BookData {\r\n    index: number;\r\n    book: Book;\r\n    read: boolean;\r\n}\r\n\r\nconst initial_books : Book[] = [\r\n    {\r\n      title: \"You don't know JS: Up & Going\",\r\n      src: \"up.jpg\",\r\n    },\r\n    {\r\n      title: \"Structure and Interpretation of Computer Programs\",\r\n      src: \"sicp.jpg\",\r\n    },\r\n    {\r\n      title: \"Types and Programming Languages\",\r\n      src: \"tapl.jpg\",\r\n    },\r\n    {\r\n      title: \"Eloquent JavaScript\",\r\n      src: \"eloquent.jpg\",\r\n    },\r\n  ]\r\n  \r\n  export function getUserBookData(): BookData[] {\r\n    const books: BookData[] = []; \r\n    initial_books.forEach((book, index) => {\r\n      const read = (localStorage.getItem(String(index)) === \"true\");\r\n      books.push({book, index, read});\r\n    });\r\n    return books;  \r\n  }\r\n  \r\n  export function saveUserBookData(booksData: BookData[]): void {\r\n    booksData.forEach((book, index) => {\r\n      const [key, value] = [String(index), String(book.read)];\r\n      localStorage.setItem(key, value);\r\n    });\r\n  }\r\n  ","import React from \"react\";\r\nimport { BookData } from \"./Books\";\r\nimport { Link, Route } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  info: BookData;\r\n  toggleRead(index: number): void;\r\n}\r\n\r\nconst BookItem: React.FC<Props> = (props: Props) => {\r\n  const {info, toggleRead} = props;\r\n  const {title, src} = info.book;\r\n  const readMark = info.read ? \"✅\" : \"❌\";\r\n  const readOrUnread = info.read ? \"unread\" : \"read\";\r\n  const imgSrc = \"/covers/\" + src;\r\n\r\n  const getLinkByFocus = (focused: any) => {\r\n    if (!focused)\r\n      return <Link to={`/focus/${info.index}`}>{title} </Link>\r\n    else\r\n      return <b><Link to={`/`}>{title} </Link></b>\r\n  };\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"cover\">\r\n        <img src={imgSrc} alt=\"book cover\" height=\"80\"></img>\r\n      </td>\r\n      <td>\r\n        {readMark} \r\n\r\n        <Route path={`/focus/${info.index}`} children={({match}) => getLinkByFocus(match)}/>\r\n      </td>\r\n      <td>\r\n        <button onClick={() => toggleRead(info.index)}> Mark as {readOrUnread} </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default BookItem;","import React from \"react\";\r\nimport { BookData } from \"./Books\";\r\nimport BookItem from \"./BookItem\";\r\n\r\ninterface Props {\r\n    books: BookData[];\r\n    toggleRead(index: number): void;\r\n}\r\n\r\nconst BookTable: React.FC<Props> = (props: Props) => {\r\n    \r\n    const book_items = props.books.map((book) => \r\n        <BookItem \r\n            key={book.index}\r\n            info={book} \r\n            toggleRead={props.toggleRead}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>Cover</td>\r\n                    <td>Info</td>\r\n                    <td>Actions</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {book_items}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default BookTable; ","import React from \"react\";\r\n\r\nimport {BookData} from \"./Books\";\r\n\r\ninterface Props {\r\n    books: BookData[];\r\n    toggleAll(intoRead: boolean): void;\r\n    sortByTitle(): void;\r\n    sortByKey(): void;\r\n}\r\n\r\nconst BookListSummary: React.FC<Props> = (props: Props) => {\r\n\r\n    const {books, toggleAll, sortByKey, sortByTitle} = props;\r\n\r\n    const books_number = books.length;\r\n    const books_read = books.filter(book => book.read).length;\r\n    const percentage = ((books_read * 100) / books_number).toFixed(0);\r\n    const books_plurarize = books_read === 1 ? \"book\" : \"books\";\r\n\r\n    const total_books_info =\r\n        `There are ${books_number} books in total.`;\r\n    const read_books_info = \r\n        `You have read ${books_read} ${books_plurarize}, which is ${percentage}% of all available books.`;\r\n    const mark_all_unread_btn = \r\n        <button onClick={() => toggleAll(false)}>Mark all as unread</button>\r\n    const mark_all_read_btn = \r\n        <button onClick={() => toggleAll(true)}>Mark all as read</button>\r\n\r\n    return (\r\n        <div>\r\n            {total_books_info} <br />\r\n            {read_books_info}\r\n            <br />\r\n            {mark_all_unread_btn}\r\n            <span> </span>\r\n            {mark_all_read_btn}\r\n            <br />\r\n            <button onClick={sortByTitle}>Sort by title</button>\r\n            <span> </span>\r\n            <button onClick={sortByKey}>Sort by key</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookListSummary; ","import React from \"react\";\r\n\r\nimport BookTable from \"./BookTable\";\r\nimport {BookData} from \"./Books\";\r\nimport BookListSummary from \"./BookListSummary\";\r\n\r\ninterface Props {\r\n    books: BookData[];\r\n    toggleRead(index: number): void;\r\n    toggleAll(intoRead: boolean): void;\r\n    sortByTitle(): void;\r\n    sortByKey(): void;\r\n}\r\n\r\nconst BookList: React.FC<Props> = (props: Props) => {\r\n\r\n    return (\r\n        <>\r\n            <BookTable \r\n                books={props.books}\r\n                toggleRead={props.toggleRead} \r\n            />\r\n            <BookListSummary \r\n                books={props.books}\r\n                toggleAll={props.toggleAll}\r\n                sortByKey={props.sortByKey}\r\n                sortByTitle={props.sortByTitle}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BookList; ","import React, {useState} from 'react';\nimport './App.css';\n\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport { getUserBookData, saveUserBookData } from \"./Books\";\nimport BookList from './BookList';\n\n\nconst App: React.FC = () => {\n  const initial_user_book_data = getUserBookData();\n  const [books, setBooks] = useState(initial_user_book_data);\n\n  const handleToggleRead = (index: number) => {\n    const newBooks = [...books];\n    const bookToChange = books[index];\n    newBooks[index] = {...bookToChange, read: !bookToChange.read};\n    \n    saveUserBookData(newBooks);\n    setBooks(newBooks);\n  }\n\n  const handleToggleAll = (value: boolean) => {\n    const newBooks = books.map(book => ({...book, read: value}));\n\n    saveUserBookData(newBooks);\n    setBooks(newBooks);\n  }\n\n  const handleSortByTitle = () => {\n    const newBooks = [...books].sort((a, b) => a.book.title > b.book.title ? 1 : -1);\n    setBooks(newBooks);\n  }\n\n  const handleSortByKey = () => {\n    const newBooks = [...books].sort((a, b) => a.index - b.index);\n    setBooks(newBooks);\n  }\n\n  return (\n    <Router>\n      <BookList \n        books={books}\n        toggleRead={handleToggleRead}\n        toggleAll={handleToggleAll}\n        sortByTitle={handleSortByTitle}\n        sortByKey={handleSortByKey}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}